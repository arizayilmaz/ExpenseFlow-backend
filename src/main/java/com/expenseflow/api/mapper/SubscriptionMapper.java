package com.expenseflow.api.mapper;

import com.expenseflow.api.dto.CreateSubscriptionRequest;
import com.expenseflow.api.dto.SubscriptionDto;
import com.expenseflow.api.entity.Subscription;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;

import java.util.List;

/**
 * Mapper for the entity Subscription and its DTOs.
 * MapStruct generates an implementation of this interface at compile time.
 */
@Mapper(componentModel = "spring") // Tells MapStruct to create a Spring Bean for this mapper
public interface SubscriptionMapper {

    /**
     * Converts a Subscription entity to a SubscriptionDto.
     * @param subscription The entity to convert.
     * @return The resulting DTO.
     */
    SubscriptionDto toDto(Subscription subscription);

    /**
     * Converts a list of Subscription entities to a list of SubscriptionDtos.
     * @param subscriptions The list of entities to convert.
     * @return The resulting list of DTOs.
     */
    List<SubscriptionDto> toDtoList(List<Subscription> subscriptions);

    /**
     * Converts a CreateSubscriptionRequest DTO to a Subscription entity.
     * @param request The DTO with creation data.
     * @return The resulting entity, ready to be saved.
     */
    // This method needs special instructions for fields that don't exist in the source DTO.
    @Mapping(target = "id", ignore = true) // Ignore the 'id' field, as it will be generated by the database.
    @Mapping(target = "user", ignore = true) // Ignore the 'user' field; it will be set manually in the service layer.
    @Mapping(target = "lastPaidCycle", ignore = true) // Ignore 'lastPaidCycle'; it will be null on creation.
    Subscription toEntity(CreateSubscriptionRequest request);
}